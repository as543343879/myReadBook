package com.acm.lico.linkedList; /**
 237 ,删除链表中的节点
 //有一个单链表的 head，我们想删除它其中的一个节点 node。
 //
 // 给你一个需要删除的节点 node 。你将 无法访问 第一个节点 head。
 //
 // 链表的所有值都是 唯一的，并且保证给定的节点 node 不是链表中的最后一个节点。
 //
 // 删除给定的节点。注意，删除节点并不是指从内存中删除它。这里的意思是：
 //
 //
 // 给定节点的值不应该存在于链表中。
 // 链表中的节点数应该减少 1。
 // node 前面的所有值顺序相同。
 // node 后面的所有值顺序相同。
 //
 //
 // 自定义测试：
 //
 //
 // 对于输入，你应该提供整个链表 head 和要给出的节点 node。node 不应该是链表的最后一个节点，而应该是链表中的一个实际节点。
 // 我们将构建链表，并将节点传递给你的函数。
 // 输出将是调用你函数后的整个链表。
 //
 //
 //
 //
 // 示例 1：
 //
 //
 //输入：head = [4,5,1,9], node = 5
 //输出：[4,1,9]
 //解释：指定链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9
 //
 //
 // 示例 2：
 //
 //
 //输入：head = [4,5,1,9], node = 1
 //输出：[4,5,9]
 //解释：指定链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9
 //
 //
 //
 // 提示：
 //
 //
 // 链表中节点的数目范围是 [2, 1000]
 // -1000 <= Node.val <= 1000
 // 链表中每个节点的值都是 唯一 的
 // 需要删除的节点 node 是 链表中的节点 ，且 不是末尾节点
 //
 //
 // Related Topics 链表 👍 1257 👎 0

 **/
/**
 1 复杂度分析
 估算问题中复杂度的上限和下限
 时间复杂度
 空间复杂度
 O(1) 一个常量下完成
 O(n) 一次遍历
 O(logn) 折半查询
 O(n^2) 两重嵌套循环查询
 官方思路：
 时间复杂度 O(1)
 空间复杂度 O(!)
 2 定位问题
 根据问题类型，确定采用何种算法思维。
 例如
 这个问题是什么类型（排序、查找、最优化）的问题；
 这个问题的复杂度下限是多少，即最低的时间复杂度可能是多少；
 采用哪些数据结构或算法思维，能把这个问题解决。
 官方思路：
 给的节点是要删除的节点， 把给的节点值 用后面的节点替换， 然后删除后面那个节点。
 3 数据操作分析
 根据增、删、查和数据顺序关系去选择合适的数据结构，利用空间换取时间。
 4 编码实现
 5 执行结果
 解答成功:
 执行耗时:0 ms,击败了100.00% 的Java用户
 内存消耗:41.1 MB,击败了22.90% 的Java用户
 */
//leetcode submit region begin(Prohibit modification and deletion)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution237 {
    public void deleteNode(ListNode node) {
        if(node == null) {
            return ;
        }
        node.val = node.next.val;
        node.next = node.next.next;

    }
}
//leetcode submit region end(Prohibit modification and deletion)
