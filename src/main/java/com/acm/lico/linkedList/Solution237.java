package com.acm.lico.linkedList;

/**
 * Solution237 class
 * https://leetcode.cn/problems/delete-node-in-a-linked-list/
 *237. 删除链表中的节点
 * 请编写一个函数，用于 删除单链表中某个特定节点 。在设计函数时需要注意，你无法访问链表的头节点 head ，只能直接访问 要被删除的节点 。
 *
 * 题目数据保证需要删除的节点 不是末尾节点 。
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：head = [4,5,1,9], node = 5
 * 输出：[4,1,9]
 * 解释：指定链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9
 * 示例 2：
 *
 *
 * 输入：head = [4,5,1,9], node = 1
 * 输出：[4,5,9]
 * 解释：指定链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9
 * @author 谢小平
 * @date 2022/7/12
 */
/**
 1 复杂度分析
估算问题中复杂度的上限和下限
 时间复杂度
 O(1)
 空间复杂度
 O(1)
    O(1) 一个常量下完成
    O(n) 一次遍历
    O(logn) 折半查询
    O(n^2) 两重嵌套循环查询
 2 定位问题
根据问题类型，确定采用何种算法思维。
 链表，当前节点替换调后面那个节点
 例如
     这个问题是什么类型（排序、查找、最优化）的问题；
     这个问题的复杂度下限是多少，即最低的时间复杂度可能是多少；
     采用哪些数据结构或算法思维，能把这个问题解决。
 3 数据操作分析
    根据增、删、查和数据顺序关系去选择合适的数据结构，利用空间换取时间。
 4 编码实现
 5 执行结果
 执行结果： 通过 显示详情 添加备注
 执行用时： 0 ms , 在所有 Java 提交中击败了 100.00% 的用户
 内存消耗： 41.1 MB , 在所有 Java 提交中击败了 21.82% 的用户
 通过测试用例： 41 / 41
 */
public class Solution237 {
    public void deleteNode(ListNode node) {
        ListNode nodeNext = node.next;
        node.val = nodeNext.val;
        node.next = nodeNext.next;
    }
}
