package com.acm.lico.doNotKnow; /**
 621 ,‰ªªÂä°Ë∞ÉÂ∫¶Âô®
 //Áªô‰Ω†‰∏Ä‰∏™Áî®Â≠óÁ¨¶Êï∞ÁªÑ tasks Ë°®Á§∫ÁöÑ CPU ÈúÄË¶ÅÊâßË°åÁöÑ‰ªªÂä°ÂàóË°®„ÄÇÂÖ∂‰∏≠ÊØè‰∏™Â≠óÊØçË°®Á§∫‰∏ÄÁßç‰∏çÂêåÁßçÁ±ªÁöÑ‰ªªÂä°„ÄÇ‰ªªÂä°ÂèØ‰ª•‰ª•‰ªªÊÑèÈ°∫Â∫èÊâßË°åÔºåÂπ∂‰∏îÊØè‰∏™‰ªªÂä°ÈÉΩÂèØ‰ª•Âú® 1 ‰∏™
 //Âçï‰ΩçÊó∂Èó¥ÂÜÖÊâßË°åÂÆå„ÄÇÂú®‰ªª‰Ωï‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÔºåCPU ÂèØ‰ª•ÂÆåÊàê‰∏Ä‰∏™‰ªªÂä°ÔºåÊàñËÄÖÂ§Ñ‰∫éÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ
 //
 // ÁÑ∂ËÄåÔºå‰∏§‰∏™ Áõ∏ÂêåÁßçÁ±ª ÁöÑ‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÊúâÈïøÂ∫¶‰∏∫Êï¥Êï∞ n ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåÂõ†Ê≠§Ëá≥Â∞ëÊúâËøûÁª≠ n ‰∏™Âçï‰ΩçÊó∂Èó¥ÂÜÖ CPU Âú®ÊâßË°å‰∏çÂêåÁöÑ‰ªªÂä°ÔºåÊàñËÄÖÂú®ÂæÖÂëΩÁä∂ÊÄÅ„ÄÇ
 //
 // ‰Ω†ÈúÄË¶ÅËÆ°ÁÆóÂÆåÊàêÊâÄÊúâ‰ªªÂä°ÊâÄÈúÄË¶ÅÁöÑ ÊúÄÁü≠Êó∂Èó¥ „ÄÇ
 //
 //
 //
 // Á§∫‰æã 1Ôºö
 //
 //
 //ËæìÂÖ•Ôºötasks = ["A","A","A","B","B","B"], n = 2
 //ËæìÂá∫Ôºö8
 //Ëß£ÈáäÔºöA -> B -> (ÂæÖÂëΩ) -> A -> B -> (ÂæÖÂëΩ) -> A -> B
 //     Âú®Êú¨Á§∫‰æã‰∏≠Ôºå‰∏§‰∏™Áõ∏ÂêåÁ±ªÂûã‰ªªÂä°‰πãÈó¥ÂøÖÈ°ªÈó¥ÈöîÈïøÂ∫¶‰∏∫ n = 2 ÁöÑÂÜ∑Âç¥Êó∂Èó¥ÔºåËÄåÊâßË°å‰∏Ä‰∏™‰ªªÂä°Âè™ÈúÄË¶Å‰∏Ä‰∏™Âçï‰ΩçÊó∂Èó¥ÔºåÊâÄ‰ª•‰∏≠Èó¥Âá∫Áé∞‰∫ÜÔºàÂæÖÂëΩÔºâÁä∂ÊÄÅ„ÄÇ
 //
 // Á§∫‰æã 2Ôºö
 //
 //
 //ËæìÂÖ•Ôºötasks = ["A","A","A","B","B","B"], n = 0
 //ËæìÂá∫Ôºö6
 //Ëß£ÈáäÔºöÂú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºå‰ªª‰ΩïÂ§ßÂ∞è‰∏∫ 6 ÁöÑÊéíÂàóÈÉΩÂèØ‰ª•Êª°Ë∂≥Ë¶ÅÊ±ÇÔºåÂõ†‰∏∫ n = 0
 //["A","A","A","B","B","B"]
 //["A","B","A","B","A","B"]
 //["B","B","B","A","A","A"]
 //...
 //ËØ∏Â¶ÇÊ≠§Á±ª
 //
 //
 // Á§∫‰æã 3Ôºö
 //
 //
 //ËæìÂÖ•Ôºötasks = ["A","A","A","A","A","A","B","C","D","E","F","G"], n = 2
 //ËæìÂá∫Ôºö16
 //Ëß£ÈáäÔºö‰∏ÄÁßçÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°àÊòØÔºö
 //     A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> (ÂæÖÂëΩ) -> (ÂæÖÂëΩ) -> A -> (ÂæÖ
 //ÂëΩ) -> (ÂæÖÂëΩ) -> A
 //
 //
 //
 //
 // ÊèêÁ§∫Ôºö
 //
 //
 // 1 <= task.length <= 10‚Å¥
 // tasks[i] ÊòØÂ§ßÂÜôËã±ÊñáÂ≠óÊØç
 // n ÁöÑÂèñÂÄºËåÉÂõ¥‰∏∫ [0, 100]
 //
 //
 // Related Topics Ë¥™ÂøÉ Êï∞ÁªÑ ÂìàÂ∏åË°® ËÆ°Êï∞ ÊéíÂ∫è Â†ÜÔºà‰ºòÂÖàÈòüÂàóÔºâ üëç 1066 üëé 0

 **/

import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.Map;
import java.util.Set;

/**
 1 Â§çÊùÇÂ∫¶ÂàÜÊûê
 ‰º∞ÁÆóÈóÆÈ¢ò‰∏≠Â§çÊùÇÂ∫¶ÁöÑ‰∏äÈôêÂíå‰∏ãÈôê
 Êó∂Èó¥Â§çÊùÇÂ∫¶
 Á©∫Èó¥Â§çÊùÇÂ∫¶
 O(1) ‰∏Ä‰∏™Â∏∏Èáè‰∏ãÂÆåÊàê
 O(n) ‰∏ÄÊ¨°ÈÅçÂéÜ
 O(logn) ÊäòÂçäÊü•ËØ¢
 O(n^2) ‰∏§ÈáçÂµåÂ•óÂæ™ÁéØÊü•ËØ¢
 2 ÂÆö‰ΩçÈóÆÈ¢ò
 Ê†πÊçÆÈóÆÈ¢òÁ±ªÂûãÔºåÁ°ÆÂÆöÈááÁî®‰ΩïÁßçÁÆóÊ≥ïÊÄùÁª¥„ÄÇ
 ‰æãÂ¶Ç
 Ëøô‰∏™ÈóÆÈ¢òÊòØ‰ªÄ‰πàÁ±ªÂûãÔºàÊéíÂ∫è„ÄÅÊü•Êâæ„ÄÅÊúÄ‰ºòÂåñÔºâÁöÑÈóÆÈ¢òÔºõ
 Ëøô‰∏™ÈóÆÈ¢òÁöÑÂ§çÊùÇÂ∫¶‰∏ãÈôêÊòØÂ§öÂ∞ëÔºåÂç≥ÊúÄ‰ΩéÁöÑÊó∂Èó¥Â§çÊùÇÂ∫¶ÂèØËÉΩÊòØÂ§öÂ∞ëÔºõ
 ÈááÁî®Âì™‰∫õÊï∞ÊçÆÁªìÊûÑÊàñÁÆóÊ≥ïÊÄùÁª¥ÔºåËÉΩÊääËøô‰∏™ÈóÆÈ¢òËß£ÂÜ≥„ÄÇ
 Ëá™Â∑±ÊÄùË∑ØÔºö ÊÄùË∑ØÈîôËØØ
 ÂÖàÊ†πÊçÆ‰ªªÂä°ÂêçÂàÜÁªÑÔºö {A,2}, {B,3}, {C,4}; ÂÆΩÂ∫¶Á™óÂè£‰∏∫ n
 Â§ßÈ°∂Â†Ü Â≠ò Êï∞ÊçÆ„ÄÇ
 time = iValue + n * iValue ;
 ÁªßÁª≠ÂèñÂá∫ value „ÄÇ Áõ¥Âà∞ n* iValue Ë¢´Ê∂àËÄó„ÄÇ Ê≤°Ê∂àËÄóÂÆåÂ∞± ÈáçÊñ∞ÊîæÂÖ•ÈòüÂàó„ÄÇ
 3 Êï∞ÊçÆÊìç‰ΩúÂàÜÊûê
 Ê†πÊçÆÂ¢û„ÄÅÂà†„ÄÅÊü•ÂíåÊï∞ÊçÆÈ°∫Â∫èÂÖ≥Á≥ªÂéªÈÄâÊã©ÂêàÈÄÇÁöÑÊï∞ÊçÆÁªìÊûÑÔºåÂà©Áî®Á©∫Èó¥Êç¢ÂèñÊó∂Èó¥„ÄÇ
 ÊùÉÈáç
 4 ÁºñÁ†ÅÂÆûÁé∞
 5 ÊâßË°åÁªìÊûú
 */
//leetcode submit region begin(Prohibit modification and deletion)



class Solution62 {

    public int leastInterval(char[] tasks, int n) {
        PriorityQueue<Map.Entry<Character, Integer>> priorityQueue = new PriorityQueue<>(((o1, o2) -> o2.getValue() - o1.getValue() ));
        Map<Character, Integer> map = new HashMap<>();
        for(char t : tasks) {
            map.put(t, map.getOrDefault(t, 0) + 1);
        }        Set<Map.Entry<Character, Integer>> entries = map.entrySet();
        entries.forEach(e->{
            priorityQueue.add(e);
        });
        int res = 0 ;
        while (!priorityQueue.isEmpty()) {
            Map.Entry<Character, Integer> maxValue = priorityQueue.poll();
            res += maxValue.getValue() + n * maxValue.getValue();
            int tempSize = n * maxValue.getValue();
            int countValueEqual = 0;
            while(!priorityQueue.isEmpty() && (tempSize >= priorityQueue.peek().getValue())){
                Map.Entry<Character, Integer> tempEntry = priorityQueue.poll();
                if(tempEntry.getValue() >= maxValue.getValue()) {
                    countValueEqual ++;
                }
                tempSize -= tempEntry.getValue();
            }
            if(tempSize > 0) {
                if(priorityQueue.isEmpty()) {
                    res -= n-countValueEqual;
                } else {
                    Map.Entry<Character, Integer> entry = priorityQueue.poll();
                    entry.setValue(entry.getValue() - tempSize);
                    priorityQueue.add(entry);
                }
            }
        }
        return res;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
