package com.acm.lico.doNotKnow;

/**
 * Solution453 class
 *
 * @author 谢小平
 * @date 2022/5/24
 * 453. 最小操作次数使数组元素相等
 * 给你一个长度为 n 的整数数组，每次操作将会使 n - 1 个元素增加 1 。返回让数组所有元素相等的最小操作次数。
 *
 *
 *
 * 示例 1：
 *
 * 输入：nums = [1,2,3]
 * 输出：3
 * 解释：
 * 只需要3次操作（注意每次操作会增加两个元素的值）：
 * [1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]
 *
 */

import java.util.Arrays;





/**
 *https://leetcode.cn/problems/minimum-moves-to-equal-array-elements/
 * 453. 最小操作次数使数组元素相等
 * 给你一个长度为 n 的整数数组，每次操作将会使 n - 1 个元素增加 1 。返回让数组所有元素相等的最小操作次数。
 *
 *
 *
 * 示例 1：
 *
 * 输入：nums = [1,2,3]
 * 输出：3
 * 解释：
 * 只需要3次操作（注意每次操作会增加两个元素的值）：
 * [1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]
 * 示例 2：
 *
 * 输入：nums = [1,1,1]
 * 输出：0
 */

/**
 1 复杂度分析
 估算问题中复杂度的上限和下限
 时间复杂度
 O(n)
 空间复杂度
 O(1) 一个常量下完成

 2 定位问题
 根据问题类型，确定采用何种算法思维。
 - 反向推论， 正向模拟很难进行，进行反向推论
 正向：n-1 个 元素+1
 反向： 每次给一个元素减1。
 例如
 这个问题是什么类型（排序、查找、最优化）的问题；
 这个问题的复杂度下限是多少，即最低的时间复杂度可能是多少；
 采用哪些数据结构或算法思维，能把这个问题解决。
 3 数据操作分析
 根据增、删、查和数据顺序关系去选择合适的数据结构，利用空间换取时间。
 4 编码实现
 5 执行结果
 84 / 84 个通过测试用例
 状态：通过
 执行用时: 5 ms
 内存消耗: 41.9 MB
 */
public class Solution453 {
    public int minMoves(int[] nums) {
        int min = Arrays.stream(nums).min().getAsInt();
        int res = 0;
        for(int i = 0; i < nums.length; i ++) {
            res += nums[i] - min;
        }
        return res;
    }
}
