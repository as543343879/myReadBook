package com.acm.lico.bit; /**
 338 ,比特位计数
 //给你一个整数 n ，对于 0 <= i <= n 中的每个 i ，计算其二进制表示中 1 的个数 ，返回一个长度为 n + 1 的数组 ans 作为答案。
 //
 //
 //
 //
 //
 //
 // 示例 1：
 //
 //
 //
 //
 //输入：n = 2
 //输出：[0,1,1]
 //解释：
 //0 --> 0
 //1 --> 1
 //2 --> 10
 //
 //
 // 示例 2：
 //
 //
 //输入：n = 5
 //输出：[0,1,1,2,1,2]
 //解释：
 //0 --> 0
 //1 --> 1
 //2 --> 10
 //3 --> 11
 //4 --> 100
 //5 --> 101
 //
 //
 //
 //
 // 提示：
 //
 //
 // 0 <= n <= 10⁵
 //
 //
 //
 //
 // 进阶：
 //
 //
 // 很容易就能实现时间复杂度为 O(n log n) 的解决方案，你可以在线性时间复杂度 O(n) 内用一趟扫描解决此问题吗？
 // 你能不使用任何内置函数解决此问题吗？（如，C++ 中的 __builtin_popcount ）
 //
 //
 // Related Topics 位运算 动态规划 👍 1122 👎 0

 **/
/**
 1 复杂度分析
 估算问题中复杂度的上限和下限
 时间复杂度
 空间复杂度
 O(1) 一个常量下完成
 O(n) 一次遍历
 O(logn) 折半查询
 O(n^2) 两重嵌套循环查询
 2 定位问题
 根据问题类型，确定采用何种算法思维。
 例如
 这个问题是什么类型（排序、查找、最优化）的问题；
 这个问题的复杂度下限是多少，即最低的时间复杂度可能是多少；
 采用哪些数据结构或算法思维，能把这个问题解决。
 3 数据操作分析
 根据增、删、查和数据顺序关系去选择合适的数据结构，利用空间换取时间。
 4 编码实现
 5 执行结果

 countBits 解答成功:
 执行耗时:1 ms,击败了99.94% 的Java用户
 内存消耗:45.4 MB,击败了61.60% 的Java用户
 */
//leetcode submit region begin(Prohibit modification and deletion)
class Solution338 {
    public int[] countBits(int n) {
        int[] res = new int[n+1];
        for(int i = 0; i <= n; i ++) {
            res[i] = Integer.bitCount(i);
        }
        return res;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
